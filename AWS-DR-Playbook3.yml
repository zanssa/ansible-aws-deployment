---
- hosts: localhost
  connection: local
  remote_user: Your_Admin_Account_on_AWS

  vars_files:
    - Vars/var.yml
    - Vars/aws.yml

  vars_prompt:
     - name: "snapshot_name"
       prompt: "Please enter the name of the snapshot of the EBS Volume:"
       private: no  

  tasks:
    - name: Automating AWS Infrastructure | Deploy Web Servie in the Disaster Recovery Region | Find the Public Subnet ID (1/3)
      ec2_vpc_subnet_facts:
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        region: "{{ SNAPSHOT_REGION }}"
        filters:
          "tag:Name": "{{ PUBLIC_TAG }}"
      register: vpc_subnet_info

    - name: Automating AWS Infrastructure | Deploy Web Servie in the Disaster Recovery Region | Find the Public Subnet ID (2/3)
      debug:
        var: vpc_subnet_info.subnets[0].id

    - name: Automating AWS Infrastructure | Deploy Web Servie in the Disaster Recovery Region | Find the Public Subnet ID (3/3)
      set_fact: 
        vpcsubnetid: "{{ vpc_subnet_info.subnets[0].id }}"

    - name: Automating AWS Infrastructure | Deploy Web Servie in the Disaster Recovery Region | Get the Snapshot ID (1/2)
      ec2_snapshot_facts:
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        region: "{{ SNAPSHOT_REGION }}"
        filters:
          "tag:Name": "{{ snapshot_name }}"
      register: snap_info

    - name: Automating AWS Infrastructure | Deploy Web Servie in the Disaster Recovery Region | Get the Snapshot ID (2/2)
      set_fact:
        snapshotid: "{{ snap_info.snapshots[0].snapshot_id }}"

    - name: Automating AWS Infrastructure | Deploy Web Service in the Disaster Recovery Region | Find the Security Group ID for Subnet ID (1/3)
      ec2_group_facts:
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        region: "{{ SNAPSHOT_REGION }}"
        filters:
          "tag:Name": "{{ MAIN_SG_NAME }}"
      register: sg_info

    - name: Automating AWS Infrastructure | Deploy Web Service in the Disaster Recovery Region | Find the Security Group ID for Subnet ID (2/3)
      debug:
        var: sg_info.security_groups[0].group_id

    - name: Automating AWS Infrastructure | Deploy Web Service in the Disaster Recovery Region | Find the Security Group ID for Subnet ID (3/3)
      set_fact: 
        sg_id: "{{ sg_info.security_groups[0].group_id }}"

    - name: Automating AWS Infrastructure | Deploy Web Servie in the Disaster Recovery Region | Create EC2 Instance (1/3)
      ec2_ami:
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        region: "{{ SNAPSHOT_REGION }}"
        name: "{{ AMI_NAME }}"
        state: present
        architecture: x86_64
        virtualization_type: hvm
        root_device_name: "/dev/sda1"
        device_mapping:
          - device_name: "/dev/sda1"
            size: 8
            snapshot_id: "{{ snapshotid }}"
            delete_on_termination: true
            volume_type: gp2
        wait: yes
        wait_timeout: 600 
      register: image_info

    - name: Automating AWS Infrastructure | Deploy Web Servie in the Disaster Recovery Region | Create EC2 Instance (2/3)
      set_fact:
        imageid: "{{ image_info.image_id }}"
    
    - name: Automating AWS Infrastructure | Deploy Web Servie in the Disaster Recovery Region | Create EC2 Instance (2/3)
      debug: 
        var: imageid

    - name: Automating AWS Infrastructure | Deploy Web Servie in the Disaster Recovery Region | Create EC2 Instance (3/3)
      ec2:
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        region: "{{ SNAPSHOT_REGION }}"
        key_name: KeyPairWest
        assign_public_ip: yes
        group_id: "{{ sg_id }}"
        image: "{{ imageid }}"
        vpc_subnet_id: "{{ vpcsubnetid }}"
        zone: "{{ PUBLIC_SUBNET_AZ }}"
        instance_tags:
            Name: "{{ AMI_NAME }}"
